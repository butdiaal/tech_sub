select * from tickets;
select * from reports;
select * from history_tickets;
select * from employees;
-- создание сотрудника и изменение роли на админа
insert into employees (name, last_name, login, password, department_id, is_admin)
    values ('Петр', 'Петров', 'admin', MD5('admin'), 1, False);
select * from employees;
update employees set is_admin = True where id = 6;

select * from history_employee;

-- Процедура, работающая при нажатии на кнопку отправить ответ на заявку у сотрудника
-- Записывает всю инфу про заявку в репортс вместе с ответом на заявку
--  у тикета, который теперь со статусом "решена"
delimiter //
create procedure get_answer_upd_status_ins_reports (in ticket_id_in int, in answer_in varchar(2000))
BEGIN
UPDATE tickets set status = 'решена' where id = ticket_id_in;
insert into reports (id_ticket, category, start_dt, finish_dt, description, empl_l_name, answer)
SELECT t.id, c.name, creation_dt, now(), t.description, concat(e.name, ' ', e.last_name), answer_in
FROM tickets t join categories c on t.id_category = c.id
join employees e on t.id_employee = e.id where t.id = ticket_id_in;
END //
delimiter ;


-- Проверка триггера на апдейт на тикетсы, по условию status != 'решена' (else)
-- ((это обязательно, раскомментьте и вставьте в консоль))

-- UPDATE tickets set status = 'в работе', id_employee = 2 where id = 2;
-- UPDATE tickets set status = 'в работе', id_employee = 4 where id = 4;
-- UPDATE tickets set status = 'в работе', id_employee = 2 where id = 7;
-- UPDATE tickets set status = 'в работе', id_employee = 3 where id = 3;
-- UPDATE tickets set status = 'в работе', id_employee = 1 where id = 6;


-- Проверка ХП на обновление статуса заявки на "решена" и на заполнение репортсов вместе с ответом,
-- и работа триггера на апдейт на условии ststus = 'решена' ((это обязательно, раскомментьте и вставьте в консоль))

-- call get_answer_upd_status_ins_reports(3, 'Проблема решена путем создания новых индексов');
-- call get_answer_upd_status_ins_reports(6, 'Установлен Kaspersky Endpoint Security');
